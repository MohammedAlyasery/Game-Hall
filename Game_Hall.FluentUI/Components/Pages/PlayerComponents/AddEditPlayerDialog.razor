@using Game_Hall._Domain.entities
@using GameHall.Servicesinterfaces
@implements IDialogContentComponent
@inject IPlayerServices PlayerServices


<FluentDialogHeader ShowDismiss="true">
    <h5 class="modal-title">@((Content.id == 0) ? "Add Player" : "Edit Player")</h5>
</FluentDialogHeader>

<FluentDialogBody>
    <FluentGrid>
        <FluentGridItem xs="12">
            <FluentGrid>
                <FluentGridItem xs="12" sm="6" md="6" lg="6">
                    <FluentTextField @bind-Value="@Content.Name" style="width:100%">Name</FluentTextField>
                </FluentGridItem>
                <FluentGridItem xs="12" sm="6" md="6" lg="6">
                    <FluentNumberField  @bind-Value="@Content.phone" style="width:100%">Phone</FluentNumberField>
                </FluentGridItem>
              
            </FluentGrid>
        </FluentGridItem>
    </FluentGrid>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Neutral" @onclick="Cancel">Cancel</FluentButton>
    <FluentButton Appearance="Appearance.Accent" @onclick="SaveAsync">Save</FluentButton>
</FluentDialogFooter>

@code {


    [Parameter] public Player Content { get; set; } = new();
    [CascadingParameter] public FluentDialog Dialog { get; set; }



    private async Task SaveAsync()
    {
        if (Content.id == 0)
        {
            await PlayerServices.Save(Content);
        }
        else
        {
            await PlayerServices.Update(Content);
        }

        await Dialog.CloseAsync(Content);
    }

    private async void Cancel()
    {
        await Dialog.CloseAsync();
    }

}