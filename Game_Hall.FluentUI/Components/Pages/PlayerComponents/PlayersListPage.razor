@page "/players"
@rendermode InteractiveServer
@inject IDialogService DialogService
@inject IPlayerServices PlayerServices
@using Game_Hall._Domain.entities
@using GameHall.Servicesinterfaces

<h3>Players</h3>

<div style="float:inline-end">
    <FluentButton Appearance="Appearance.Accent" @onclick="ShowAddModal">Add New Player</FluentButton>
</div>

<br />

@if (players == null)
{
    <span>Loading...</span>
}
else
{

    <FluentDataGrid Items="@players"
                    GenerateHeader="GenerateHeaderOption.Sticky"
                    ResizableColumns=true Pagination="@pagination"
                    Style="width: 100%; height: 500px;overflow:auto;">

        <PropertyColumn Property="@(p=>p.Name)" Sortable="true" />
        <PropertyColumn Property="@(p=>p.phone)" Sortable="true" Format="00000000000"/>
        <TemplateColumn Title="Actions" Align="@Align.End">
            <FluentButton aria-label="Edit item" IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => OpenDialogAsync(context))" />
            <FluentButton aria-label="Delete item" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => DeletePlayer(context))" />
        </TemplateColumn>

    </FluentDataGrid>

    <FluentPaginator State="@pagination" />


}



@code {

    private IQueryable<Player>? players;

    private AddEditPlayerDialog? addEditPlayerDialog;

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    protected override async Task OnInitializedAsync()
    {
        await LoadPlayers();
    }

    private async Task LoadPlayers()
    {

        players = (await PlayerServices.GetAll()).AsQueryable();
        StateHasChanged();
    }

    private async Task OpenDialogAsync(Player player)
    {
        DialogParameters parameters = new DialogParameters()
            {
                Title = ((player.id == 0) ? "Add Player" : "Edit Player"),
                PrimaryAction = "Yes",
                PrimaryActionEnabled = false,
                SecondaryAction = "No",
                Width = "2000px",
                TrapFocus = true,
                Modal = true,
                PreventScroll = true
            };
        var dialog = await DialogService.ShowDialogAsync<AddEditPlayerDialog>(player, parameters);
        var result = await dialog.Result;
        if (!result.Cancelled && result.Data != null)
        {
            player = (Player)result.Data;
            await LoadPlayers();
        }


    }
    private async Task ShowAddModal()
    {
        await OpenDialogAsync(new Player());
    }

    private async void DeletePlayer(Player player)
    {
        await PlayerServices.Delete(player);
        await LoadPlayers();
    }

    private async void RefreshList()
    {
        await LoadPlayers();
    }
}
